// Code generated by MockGen. DO NOT EDIT.
// Source: internal/actor/actor.go
//
// Generated by this command:
//
//	mockgen -self_package=github.com/Coderovshik/film-library/internal/actor -package=actor -source=internal/actor/actor.go -destination=internal/actor/mock.go
//

// Package actor is a generated GoMock package.
package actor

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockActorRepository is a mock of ActorRepository interface.
type MockActorRepository struct {
	ctrl     *gomock.Controller
	recorder *MockActorRepositoryMockRecorder
}

// MockActorRepositoryMockRecorder is the mock recorder for MockActorRepository.
type MockActorRepositoryMockRecorder struct {
	mock *MockActorRepository
}

// NewMockActorRepository creates a new mock instance.
func NewMockActorRepository(ctrl *gomock.Controller) *MockActorRepository {
	mock := &MockActorRepository{ctrl: ctrl}
	mock.recorder = &MockActorRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActorRepository) EXPECT() *MockActorRepositoryMockRecorder {
	return m.recorder
}

// AddActor mocks base method.
func (m *MockActorRepository) AddActor(ctx context.Context, a *Actor) (*Actor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddActor", ctx, a)
	ret0, _ := ret[0].(*Actor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddActor indicates an expected call of AddActor.
func (mr *MockActorRepositoryMockRecorder) AddActor(ctx, a any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddActor", reflect.TypeOf((*MockActorRepository)(nil).AddActor), ctx, a)
}

// DeleteActor mocks base method.
func (m *MockActorRepository) DeleteActor(ctx context.Context, id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteActor", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteActor indicates an expected call of DeleteActor.
func (mr *MockActorRepositoryMockRecorder) DeleteActor(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteActor", reflect.TypeOf((*MockActorRepository)(nil).DeleteActor), ctx, id)
}

// GetActor mocks base method.
func (m *MockActorRepository) GetActor(ctx context.Context, id int32) (*Actor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActor", ctx, id)
	ret0, _ := ret[0].(*Actor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActor indicates an expected call of GetActor.
func (mr *MockActorRepositoryMockRecorder) GetActor(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActor", reflect.TypeOf((*MockActorRepository)(nil).GetActor), ctx, id)
}

// GetActors mocks base method.
func (m *MockActorRepository) GetActors(ctx context.Context) ([]*Actor, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActors", ctx)
	ret0, _ := ret[0].([]*Actor)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActors indicates an expected call of GetActors.
func (mr *MockActorRepositoryMockRecorder) GetActors(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActors", reflect.TypeOf((*MockActorRepository)(nil).GetActors), ctx)
}

// UpdateActor mocks base method.
func (m *MockActorRepository) UpdateActor(ctx context.Context, a *Actor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateActor", ctx, a)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateActor indicates an expected call of UpdateActor.
func (mr *MockActorRepositoryMockRecorder) UpdateActor(ctx, a any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateActor", reflect.TypeOf((*MockActorRepository)(nil).UpdateActor), ctx, a)
}

// MockActorService is a mock of ActorService interface.
type MockActorService struct {
	ctrl     *gomock.Controller
	recorder *MockActorServiceMockRecorder
}

// MockActorServiceMockRecorder is the mock recorder for MockActorService.
type MockActorServiceMockRecorder struct {
	mock *MockActorService
}

// NewMockActorService creates a new mock instance.
func NewMockActorService(ctrl *gomock.Controller) *MockActorService {
	mock := &MockActorService{ctrl: ctrl}
	mock.recorder = &MockActorServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActorService) EXPECT() *MockActorServiceMockRecorder {
	return m.recorder
}

// AddActor mocks base method.
func (m *MockActorService) AddActor(ctx context.Context, req *ActorInfo) (*ActorResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddActor", ctx, req)
	ret0, _ := ret[0].(*ActorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddActor indicates an expected call of AddActor.
func (mr *MockActorServiceMockRecorder) AddActor(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddActor", reflect.TypeOf((*MockActorService)(nil).AddActor), ctx, req)
}

// DeleteActor mocks base method.
func (m *MockActorService) DeleteActor(ctx context.Context, req *ActorIdRequest) (*ActorResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteActor", ctx, req)
	ret0, _ := ret[0].(*ActorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteActor indicates an expected call of DeleteActor.
func (mr *MockActorServiceMockRecorder) DeleteActor(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteActor", reflect.TypeOf((*MockActorService)(nil).DeleteActor), ctx, req)
}

// GetActor mocks base method.
func (m *MockActorService) GetActor(ctx context.Context, req *ActorIdRequest) (*ActorResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActor", ctx, req)
	ret0, _ := ret[0].(*ActorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActor indicates an expected call of GetActor.
func (mr *MockActorServiceMockRecorder) GetActor(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActor", reflect.TypeOf((*MockActorService)(nil).GetActor), ctx, req)
}

// GetActors mocks base method.
func (m *MockActorService) GetActors(ctx context.Context) ([]*ActorResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActors", ctx)
	ret0, _ := ret[0].([]*ActorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActors indicates an expected call of GetActors.
func (mr *MockActorServiceMockRecorder) GetActors(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActors", reflect.TypeOf((*MockActorService)(nil).GetActors), ctx)
}

// UpdateActor mocks base method.
func (m *MockActorService) UpdateActor(ctx context.Context, req *ActorIdInfoRequest) (*ActorResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateActor", ctx, req)
	ret0, _ := ret[0].(*ActorResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateActor indicates an expected call of UpdateActor.
func (mr *MockActorServiceMockRecorder) UpdateActor(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateActor", reflect.TypeOf((*MockActorService)(nil).UpdateActor), ctx, req)
}

// MockActorHandler is a mock of ActorHandler interface.
type MockActorHandler struct {
	ctrl     *gomock.Controller
	recorder *MockActorHandlerMockRecorder
}

// MockActorHandlerMockRecorder is the mock recorder for MockActorHandler.
type MockActorHandlerMockRecorder struct {
	mock *MockActorHandler
}

// NewMockActorHandler creates a new mock instance.
func NewMockActorHandler(ctrl *gomock.Controller) *MockActorHandler {
	mock := &MockActorHandler{ctrl: ctrl}
	mock.recorder = &MockActorHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActorHandler) EXPECT() *MockActorHandlerMockRecorder {
	return m.recorder
}

// AddActor mocks base method.
func (m *MockActorHandler) AddActor(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddActor", w, r)
}

// AddActor indicates an expected call of AddActor.
func (mr *MockActorHandlerMockRecorder) AddActor(w, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddActor", reflect.TypeOf((*MockActorHandler)(nil).AddActor), w, r)
}

// DeleteActor mocks base method.
func (m *MockActorHandler) DeleteActor(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteActor", w, r)
}

// DeleteActor indicates an expected call of DeleteActor.
func (mr *MockActorHandlerMockRecorder) DeleteActor(w, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteActor", reflect.TypeOf((*MockActorHandler)(nil).DeleteActor), w, r)
}

// GetActor mocks base method.
func (m *MockActorHandler) GetActor(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetActor", w, r)
}

// GetActor indicates an expected call of GetActor.
func (mr *MockActorHandlerMockRecorder) GetActor(w, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActor", reflect.TypeOf((*MockActorHandler)(nil).GetActor), w, r)
}

// GetActors mocks base method.
func (m *MockActorHandler) GetActors(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetActors", w, r)
}

// GetActors indicates an expected call of GetActors.
func (mr *MockActorHandlerMockRecorder) GetActors(w, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActors", reflect.TypeOf((*MockActorHandler)(nil).GetActors), w, r)
}

// UpdateActor mocks base method.
func (m *MockActorHandler) UpdateActor(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateActor", w, r)
}

// UpdateActor indicates an expected call of UpdateActor.
func (mr *MockActorHandlerMockRecorder) UpdateActor(w, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateActor", reflect.TypeOf((*MockActorHandler)(nil).UpdateActor), w, r)
}
