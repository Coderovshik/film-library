// Code generated by MockGen. DO NOT EDIT.
// Source: internal/film/film.go
//
// Generated by this command:
//
//	mockgen -self_package=github.com/Coderovshik/film-library/internal/film -package=film -source=internal/film/film.go -destination=internal/film/mock.go
//

// Package film is a generated GoMock package.
package film

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockFilmRepository is a mock of FilmRepository interface.
type MockFilmRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFilmRepositoryMockRecorder
}

// MockFilmRepositoryMockRecorder is the mock recorder for MockFilmRepository.
type MockFilmRepositoryMockRecorder struct {
	mock *MockFilmRepository
}

// NewMockFilmRepository creates a new mock instance.
func NewMockFilmRepository(ctrl *gomock.Controller) *MockFilmRepository {
	mock := &MockFilmRepository{ctrl: ctrl}
	mock.recorder = &MockFilmRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilmRepository) EXPECT() *MockFilmRepositoryMockRecorder {
	return m.recorder
}

// AddFilm mocks base method.
func (m *MockFilmRepository) AddFilm(ctx context.Context, f *Film) (*Film, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFilm", ctx, f)
	ret0, _ := ret[0].(*Film)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddFilm indicates an expected call of AddFilm.
func (mr *MockFilmRepositoryMockRecorder) AddFilm(ctx, f any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFilm", reflect.TypeOf((*MockFilmRepository)(nil).AddFilm), ctx, f)
}

// AddFilmActors mocks base method.
func (m *MockFilmRepository) AddFilmActors(ctx context.Context, fa *FilmActors) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFilmActors", ctx, fa)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddFilmActors indicates an expected call of AddFilmActors.
func (mr *MockFilmRepositoryMockRecorder) AddFilmActors(ctx, fa any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFilmActors", reflect.TypeOf((*MockFilmRepository)(nil).AddFilmActors), ctx, fa)
}

// DeleteFilm mocks base method.
func (m *MockFilmRepository) DeleteFilm(ctx context.Context, id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFilm", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFilm indicates an expected call of DeleteFilm.
func (mr *MockFilmRepositoryMockRecorder) DeleteFilm(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFilm", reflect.TypeOf((*MockFilmRepository)(nil).DeleteFilm), ctx, id)
}

// DeleteFilmActors mocks base method.
func (m *MockFilmRepository) DeleteFilmActors(ctx context.Context, fa *FilmActors) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFilmActors", ctx, fa)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFilmActors indicates an expected call of DeleteFilmActors.
func (mr *MockFilmRepositoryMockRecorder) DeleteFilmActors(ctx, fa any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFilmActors", reflect.TypeOf((*MockFilmRepository)(nil).DeleteFilmActors), ctx, fa)
}

// GetFilm mocks base method.
func (m *MockFilmRepository) GetFilm(ctx context.Context, id int32) (*Film, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilm", ctx, id)
	ret0, _ := ret[0].(*Film)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilm indicates an expected call of GetFilm.
func (mr *MockFilmRepositoryMockRecorder) GetFilm(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilm", reflect.TypeOf((*MockFilmRepository)(nil).GetFilm), ctx, id)
}

// GetFilmActors mocks base method.
func (m *MockFilmRepository) GetFilmActors(ctx context.Context, id int32) ([]*ActorShort, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilmActors", ctx, id)
	ret0, _ := ret[0].([]*ActorShort)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilmActors indicates an expected call of GetFilmActors.
func (mr *MockFilmRepositoryMockRecorder) GetFilmActors(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilmActors", reflect.TypeOf((*MockFilmRepository)(nil).GetFilmActors), ctx, id)
}

// GetFilms mocks base method.
func (m *MockFilmRepository) GetFilms(ctx context.Context, q *Query) ([]*Film, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilms", ctx, q)
	ret0, _ := ret[0].([]*Film)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilms indicates an expected call of GetFilms.
func (mr *MockFilmRepositoryMockRecorder) GetFilms(ctx, q any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilms", reflect.TypeOf((*MockFilmRepository)(nil).GetFilms), ctx, q)
}

// UpdateFilm mocks base method.
func (m *MockFilmRepository) UpdateFilm(ctx context.Context, f *Film) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFilm", ctx, f)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFilm indicates an expected call of UpdateFilm.
func (mr *MockFilmRepositoryMockRecorder) UpdateFilm(ctx, f any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFilm", reflect.TypeOf((*MockFilmRepository)(nil).UpdateFilm), ctx, f)
}

// MockFilmService is a mock of FilmService interface.
type MockFilmService struct {
	ctrl     *gomock.Controller
	recorder *MockFilmServiceMockRecorder
}

// MockFilmServiceMockRecorder is the mock recorder for MockFilmService.
type MockFilmServiceMockRecorder struct {
	mock *MockFilmService
}

// NewMockFilmService creates a new mock instance.
func NewMockFilmService(ctrl *gomock.Controller) *MockFilmService {
	mock := &MockFilmService{ctrl: ctrl}
	mock.recorder = &MockFilmServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilmService) EXPECT() *MockFilmServiceMockRecorder {
	return m.recorder
}

// AddFilm mocks base method.
func (m *MockFilmService) AddFilm(ctx context.Context, req *AddFilmRequest) (*FilmResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFilm", ctx, req)
	ret0, _ := ret[0].(*FilmResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddFilm indicates an expected call of AddFilm.
func (mr *MockFilmServiceMockRecorder) AddFilm(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFilm", reflect.TypeOf((*MockFilmService)(nil).AddFilm), ctx, req)
}

// AddFilmActors mocks base method.
func (m *MockFilmService) AddFilmActors(ctx context.Context, req *FilmActorsRequest) ([]*ActorShortResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFilmActors", ctx, req)
	ret0, _ := ret[0].([]*ActorShortResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddFilmActors indicates an expected call of AddFilmActors.
func (mr *MockFilmServiceMockRecorder) AddFilmActors(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFilmActors", reflect.TypeOf((*MockFilmService)(nil).AddFilmActors), ctx, req)
}

// DeleteFilm mocks base method.
func (m *MockFilmService) DeleteFilm(ctx context.Context, req *FilmIdRequest) (*FilmResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFilm", ctx, req)
	ret0, _ := ret[0].(*FilmResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFilm indicates an expected call of DeleteFilm.
func (mr *MockFilmServiceMockRecorder) DeleteFilm(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFilm", reflect.TypeOf((*MockFilmService)(nil).DeleteFilm), ctx, req)
}

// DeleteFilmActors mocks base method.
func (m *MockFilmService) DeleteFilmActors(ctx context.Context, req *FilmActorsRequest) ([]*ActorShortResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFilmActors", ctx, req)
	ret0, _ := ret[0].([]*ActorShortResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFilmActors indicates an expected call of DeleteFilmActors.
func (mr *MockFilmServiceMockRecorder) DeleteFilmActors(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFilmActors", reflect.TypeOf((*MockFilmService)(nil).DeleteFilmActors), ctx, req)
}

// GetFilm mocks base method.
func (m *MockFilmService) GetFilm(ctx context.Context, req *FilmIdRequest) (*FilmResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilm", ctx, req)
	ret0, _ := ret[0].(*FilmResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilm indicates an expected call of GetFilm.
func (mr *MockFilmServiceMockRecorder) GetFilm(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilm", reflect.TypeOf((*MockFilmService)(nil).GetFilm), ctx, req)
}

// GetFilmActors mocks base method.
func (m *MockFilmService) GetFilmActors(ctx context.Context, req *FilmIdRequest) ([]*ActorShortResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilmActors", ctx, req)
	ret0, _ := ret[0].([]*ActorShortResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilmActors indicates an expected call of GetFilmActors.
func (mr *MockFilmServiceMockRecorder) GetFilmActors(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilmActors", reflect.TypeOf((*MockFilmService)(nil).GetFilmActors), ctx, req)
}

// GetFilms mocks base method.
func (m *MockFilmService) GetFilms(ctx context.Context, req *GetFilmsRequest) ([]*FilmResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilms", ctx, req)
	ret0, _ := ret[0].([]*FilmResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilms indicates an expected call of GetFilms.
func (mr *MockFilmServiceMockRecorder) GetFilms(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilms", reflect.TypeOf((*MockFilmService)(nil).GetFilms), ctx, req)
}

// UpdateFilm mocks base method.
func (m *MockFilmService) UpdateFilm(ctx context.Context, req *FilmIdInfoRequest) (*FilmResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFilm", ctx, req)
	ret0, _ := ret[0].(*FilmResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateFilm indicates an expected call of UpdateFilm.
func (mr *MockFilmServiceMockRecorder) UpdateFilm(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFilm", reflect.TypeOf((*MockFilmService)(nil).UpdateFilm), ctx, req)
}

// MockFilmHandler is a mock of FilmHandler interface.
type MockFilmHandler struct {
	ctrl     *gomock.Controller
	recorder *MockFilmHandlerMockRecorder
}

// MockFilmHandlerMockRecorder is the mock recorder for MockFilmHandler.
type MockFilmHandlerMockRecorder struct {
	mock *MockFilmHandler
}

// NewMockFilmHandler creates a new mock instance.
func NewMockFilmHandler(ctrl *gomock.Controller) *MockFilmHandler {
	mock := &MockFilmHandler{ctrl: ctrl}
	mock.recorder = &MockFilmHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilmHandler) EXPECT() *MockFilmHandlerMockRecorder {
	return m.recorder
}

// AddFilm mocks base method.
func (m *MockFilmHandler) AddFilm(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddFilm", w, r)
}

// AddFilm indicates an expected call of AddFilm.
func (mr *MockFilmHandlerMockRecorder) AddFilm(w, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFilm", reflect.TypeOf((*MockFilmHandler)(nil).AddFilm), w, r)
}

// AddFilmActors mocks base method.
func (m *MockFilmHandler) AddFilmActors(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddFilmActors", w, r)
}

// AddFilmActors indicates an expected call of AddFilmActors.
func (mr *MockFilmHandlerMockRecorder) AddFilmActors(w, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFilmActors", reflect.TypeOf((*MockFilmHandler)(nil).AddFilmActors), w, r)
}

// DeleteFilm mocks base method.
func (m *MockFilmHandler) DeleteFilm(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteFilm", w, r)
}

// DeleteFilm indicates an expected call of DeleteFilm.
func (mr *MockFilmHandlerMockRecorder) DeleteFilm(w, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFilm", reflect.TypeOf((*MockFilmHandler)(nil).DeleteFilm), w, r)
}

// DeleteFilmActors mocks base method.
func (m *MockFilmHandler) DeleteFilmActors(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteFilmActors", w, r)
}

// DeleteFilmActors indicates an expected call of DeleteFilmActors.
func (mr *MockFilmHandlerMockRecorder) DeleteFilmActors(w, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFilmActors", reflect.TypeOf((*MockFilmHandler)(nil).DeleteFilmActors), w, r)
}

// GetFilm mocks base method.
func (m *MockFilmHandler) GetFilm(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetFilm", w, r)
}

// GetFilm indicates an expected call of GetFilm.
func (mr *MockFilmHandlerMockRecorder) GetFilm(w, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilm", reflect.TypeOf((*MockFilmHandler)(nil).GetFilm), w, r)
}

// GetFilmActors mocks base method.
func (m *MockFilmHandler) GetFilmActors(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetFilmActors", w, r)
}

// GetFilmActors indicates an expected call of GetFilmActors.
func (mr *MockFilmHandlerMockRecorder) GetFilmActors(w, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilmActors", reflect.TypeOf((*MockFilmHandler)(nil).GetFilmActors), w, r)
}

// GetFilms mocks base method.
func (m *MockFilmHandler) GetFilms(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetFilms", w, r)
}

// GetFilms indicates an expected call of GetFilms.
func (mr *MockFilmHandlerMockRecorder) GetFilms(w, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilms", reflect.TypeOf((*MockFilmHandler)(nil).GetFilms), w, r)
}

// UpdateFilm mocks base method.
func (m *MockFilmHandler) UpdateFilm(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateFilm", w, r)
}

// UpdateFilm indicates an expected call of UpdateFilm.
func (mr *MockFilmHandlerMockRecorder) UpdateFilm(w, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFilm", reflect.TypeOf((*MockFilmHandler)(nil).UpdateFilm), w, r)
}

// MockFilmhandler is a mock of Filmhandler interface.
type MockFilmhandler struct {
	ctrl     *gomock.Controller
	recorder *MockFilmhandlerMockRecorder
}

// MockFilmhandlerMockRecorder is the mock recorder for MockFilmhandler.
type MockFilmhandlerMockRecorder struct {
	mock *MockFilmhandler
}

// NewMockFilmhandler creates a new mock instance.
func NewMockFilmhandler(ctrl *gomock.Controller) *MockFilmhandler {
	mock := &MockFilmhandler{ctrl: ctrl}
	mock.recorder = &MockFilmhandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFilmhandler) EXPECT() *MockFilmhandlerMockRecorder {
	return m.recorder
}
