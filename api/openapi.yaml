openapi: '3.0.2'
info:
  title: Film library
  version: '1.0'
  description: |
    This is a simple Film library api. It allows reading and modifying of information about actors and films.

    Useful links:
    - [The Film library repository](https://github.com/Coderovshik/film-library)
    - [The source API definition for the Film library](https://github.com/Coderovshik/film-library/blob/master/api/openapi.yml)
servers:
  - url: localhost:8080
security:
  - cookieAuth: []
tags:
  - name: util
    description: Useful functionalty not related to films and actors
  - name: actors
    description: Everything about actors
  - name: films
    description: Everything about films
  - name: users
    description: Authentication

paths:
  /ping:
    get:
      tags:
        - util
      summary: ping server
      responses:
        '200':
          description: OK
          content:
            text/plain:
              schema:
                type: string
                enum: [pong]
  /docs:
    get:
      tags:
        - util
      summary: openapi documentation
      responses:
        '200':
          description: OK
          content:
            text/html:
              schema:
                type: string
                format: binary
  /actors:
    get:
      tags:
        - actors
      summary: get actors list
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getActorsResponse"
        '401':
          description: Unauthorized
    post:
      tags:
        - actors
      summary: add actor
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/actorInfo"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/actor"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorMessage"
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  /actors/{id}:
    get:
      tags:
        - actors
      summary: get specific actor
      parameters:
        - $ref: "#/components/parameters/actorId"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/actor"
        '401':
          description: Unauthorized
        '404':
          description: Not Found
    put:
      tags:
        - actors
      summary: update info about specific actor
      description: |
        populate ONLY those fields of request schema that need to be updated,
        empty ones will be IGNORED
      parameters:
        - $ref: "#/components/parameters/actorId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/actorInfo"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/actor"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorMessage"
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
    delete:
      tags:
        - actors
      summary: delete specific actor
      parameters:
        - $ref: "#/components/parameters/actorId"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/actor"
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /films:
    get:
      tags:
        - films
      summary: get films list
      description: |
        search films by specifying sort and filte query parameters
      parameters:
        - $ref: "#/components/parameters/filmSort"
        - $ref: "#/components/parameters/actorFilter"
        - $ref: "#/components/parameters/filmFilter"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/getFilmsResponse"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorMessage"
        '401':
          description: Unauthorized
    post:
      tags:
        - films
      summary: add film
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createFilmRequest"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/film"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorMessage"
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
  /films/{id}:
    get:
      tags:
        - films
      summary: get specific film
      parameters:
        - $ref: "#/components/parameters/filmId"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/film"
        '401':
          description: Unauthorized
        '404':
          description: Not Found
    put:
      tags:
        - films
      summary: update info about specific film
      description: |
        empty fields ignored EXCEPT 'rating' IF you want 'rating' to remain unchanged 
        put negative value otherwise it will be interpreted as 0
      parameters:
        - $ref: "#/components/parameters/filmId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/filmInfo"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/film"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorMessage"
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
    delete:
      tags:
        - films
      summary: delte specific film
      parameters:
        - $ref: "#/components/parameters/filmId"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/film"
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /films/{id}/actors:
    get:
      tags:
        - films
      summary: get ids of actors related to film
      parameters:
        - $ref: "#/components/parameters/filmId"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/actorsShortForm"
        '404':
          description: Not Found
        '401':
          description: Unauthorized
    put:
      tags:
        - films
      summary: add actors to film
      parameters:
        - $ref: "#/components/parameters/filmId"
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/id"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/actorsShortForm"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorMessage"
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
    delete:
      tags:
        - films
      summary: remove actors from film
      parameters:
        - $ref: "#/components/parameters/filmId"
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/id"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/actorsShortForm"
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorMessage"
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
  /signup:
    post:
      tags:
        - users
      summary: sign up
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/userInfo"
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    $ref: "#/components/schemas/id"
                  username:
                    type: string
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorMessage"
      security: []
  /signin:
    post:
      tags:
        - users
      summary: sign in
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/userInfo"
      responses:
        '200':
          description: OK
          headers:
            Set-Cookie:
              schema:
                type: string
                example: jwt=...; Path=/; HttpOnly
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/errorMessage"
      security: []
  /signout:
    delete:
      tags:
        - users
      summary: sign out
      responses:
        '200':
          description: OK
          headers:
            Set-Cookie:
              schema:
                type: string
                example: jwt=...; Path=/; HttpOnly
        '401':
          description: Unauthorized
  

components:
  schemas:
    errorMessage:
      type: object
      properties:
        errorType:
          type: string
          enum: [Validation, Conflict]
        body:
          type: string
    getActorsResponse:
      type: array
      items:
        $ref: "#/components/schemas/actor"
    getFilmsResponse:
      type: array
      items:
        $ref: "#/components/schemas/film"
    createFilmRequest:
      type: object
      properties:
        info:
          $ref: "#/components/schemas/filmInfo"
        actorIds:
          type: array
          items:
            $ref: "#/components/schemas/id"
    actor:
      type: object
      required:
        - id
        - info
      properties:
        id:
          type: integer
          format: int32
        info:
          $ref: "#/components/schemas/actorInfo"
        films:
          type: array
          items:
            type: string
    film:
      type: object
      properties:
        id:
          type: integer
          format: int32
        info:
          $ref: "#/components/schemas/filmInfo"
        actors:
          type: array
          items:
            type: string
    actorInfo:
      type: object
      properties:
        name:
          type: string
        sex:
          type: string
          enum: ["male", "female"]
        birthday:
          type: string
          format: date
    filmInfo:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 150
        description:
          type: string
          maxLength: 1000
        releasedate:
          type: string
          format: date
        rating:
          type: integer
          minimum: 0
          maximum: 10
    userInfo:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
          format: password
    id:
      description: identificator
      type: integer
      format: int32
    actorsShortForm:
      type: array
      items:
        type: object
        properties:
          id:
            $ref: "#/components/schemas/id"
          name:
            type: string
  parameters:
    actorId:
      name: id
      in: path
      required: true
      schema:
        type: integer
        format: int32
      description: The actor id
    filmId:
      name: id
      in: path
      required: true
      schema:
        type: integer
        format: int32
      description: The film id
    filmSort:
      name: sort
      in: query
      required: false
      explode: true
      schema:
        type: string
        pattern: '^(name|rating|releasedate),(asc|desc)$'
        default: rating,desc
        example: name,asc
    actorFilter:
      name: actor
      in: query
      required: false
      schema:
        type: string
      description: filter by actors matching given keyword (empty query ignored)
    filmFilter:
      name: film
      in: query
      required: false
      schema:
        type: string
      description: filter by films matching given keyword (empty query ignored)
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: jwt
    